--input-Reservation ID(Instead of actually passing reservation id customer name, street name, city name, state code, zip code, start and end dates are passed to be able to use find_reservation_id function)
--Output- Cancels the specified event given in the input. 

create or replace PROCEDURE CANCEL_EVENT(I_CUSTOMER_NAME IN VARCHAR, I_STREET_NAME IN VARCHAR, I_CITY_NAME IN VARCHAR, 
        I_STATE_CODE IN VARCHAR, I_ZIP_CODE IN VARCHAR, I_START_DATE IN DATE, I_END_DATE IN DATE) AS
V_RESERVATION_ID events.reservation_id%TYPE;
V_EVENT_STATUS EVENTS.EVENT_STATUS%TYPE;
BEGIN
	
    DBMS_OUTPUT.PUT_LINE('-- CANCEL EVENT STARTING');

    V_RESERVATION_ID := FIND_RESERVATION_ID(I_CUSTOMER_NAME, I_STREET_NAME, I_CITY_NAME, I_STATE_CODE, I_ZIP_CODE, I_START_DATE, I_END_DATE);
    
    SELECT EVENT_STATUS INTO V_EVENT_STATUS
    	FROM EVENTS
    	WHERE RESERVATION_ID = V_RESERVATION_ID;


   IF V_EVENT_STATUS = 0 THEN
    DBMS_OUTPUT.PUT_LINE('EVENT IS ALREADY CANCELLED');
   ELSE
	UPDATE EVENTS SET EVENT_STATUS = 0
	WHERE RESERVATION_ID = V_RESERVATION_ID;
    DBMS_OUTPUT.PUT_LINE('CANCEL_EVENT IS SUCCESSFUL');
   END IF;

EXCEPTION	
	WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20010, 'EVENT STATUS NOT FOUND IN EVENTS TABLE');
	WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        DBMS_OUTPUT.PUT_LINE('-- ADD_SERVICE_TO_EVENT - FAILED');
    	RAISE;

END CANCEL_EVENT;
